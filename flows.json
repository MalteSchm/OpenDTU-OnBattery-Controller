[
    {
        "id": "6e0fbe3dc2362892",
        "type": "tab",
        "label": "Übersicht",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "7307d77d7f13453e",
        "type": "tab",
        "label": "Durchschnittspreisberechnung",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "683fd7.e63da028",
        "type": "tab",
        "label": "Aktueller Ertrag",
        "disabled": false,
        "info": ""
    },
    {
        "id": "8a1442584b5c9904",
        "type": "tab",
        "label": "Dynamic Power Limiter",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "c5224d76f6a6e37e",
        "type": "tab",
        "label": "Ertragsprognose",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "cac5d58849cb543a",
        "type": "tab",
        "label": "Huawei Netzteil",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "bb10d8ab69b25398",
        "type": "tab",
        "label": "Auto",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "cf76c2158bee1883",
        "type": "tab",
        "label": "Historie",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "93f485839dfa27a8",
        "type": "subflow",
        "name": "Solar forecast",
        "info": "This subflow uses the http request node to fetch solar forecasts for geographical positions, using the API from https://forecast.solar/. Please check their website and consider getting a paid account.\n\nDo note that, on a free account, you are limited in the number of requests to do. Also note that the data only gets updated once every 15 minutes, so there is no reason to query more often. There is rate limiting built in the subflow not to perform requests more than once every 15 minutes.\n\n# Configuration\n\nIt uses the parameters as described on: http://doc.forecast.solar/doku.php\n\n - `:apikey` - personal API key for registered users\n - `:lat` - latitude of location, -90 (south) … 90 (north); Internal precission is 0.0001 or abt. 10 m\n - `:lon` - longitude of location, -180 (west) … 180 (east); Internal precission is 0.0001 or abt. 10 m\n - `:dec` - plane declination, 0 (horizontal) … 90 (vertical); Internal precission is integer\n - `:az` - plane azimuth, -180 … 180 (-180 = north, -90 = east, 0 = south, 90 = west, 180 = north); Internal precission is integer\n - `:kwp` - installed modules power in kilo watt peak (kWp)\n\nYou can choose between 3 different type of requests. Note that only `estimate` is available on the free plan.\n\n- `estimate` - this is the forecasted estimate that your panels should produce (given the right parameter settings)\n- `history` - historical data showing the long term averages for the days to come. See [https://joint-research-centre.ec.europa.eu/pvgis-online-tool/pvgis-data-download/cm-saf-solar-radiation_en](https://joint-research-centre.ec.europa.eu/pvgis-online-tool/pvgis-data-download/cm-saf-solar-radiation_en) for where the data is fetched from.\n- `clear sky` - estimate given if there would be a clear sky tomorrow\n\nIn case of estimates, one of the following options can be selected:\n- `watts` - Watts (power) average for the period\n- `watt_hours_period` - Watt hours (energy) for the period\n- `watt_hours` - Watt hours (energy) summarized over the day\n- `watt_hours_day` - Watt hours (energy) summarized for each day\n\nFor the graph output there are some extra settings available:\n\n- _Output in kWh_ - when checked output can be set to kWh instead of Wh\n- _Show todays forecast_ - whether or not to include todays forecast\n- _Days to forecast_ - the number of days to forecast (excluding today). Note that you can not get more days forecasted than your API key allows.\n- _Widen graph_ - widen the graph to only show non-zero values\n\n# Input \n\nThe input is for triggering the solar forecast request. \nIt triggers when injecting a message into the node.\n\n# Output\n\nThere are two outputs. The first output is an object with the result and a status message stored into the `msg.payload`.\n\nMost important is the `msg.payload.result`, which contains the estimated production of the panels. E.g.:\n\n```\npayload: object\n  result: object\n    2022-11-28: 23\n    2022-11-29: 35\n```\n\nThe `msg.payload.message` gives information on how successful the query was, the exitcode of the query and the status of the rate limit (how many queries you have left).\n\nThe **second** output can be directly linked to a line or a bar chart, quickly giving a once-glance overview for the predicted forecast.\n\n# Status\n\nInitially the status of the note will be a blue dot, showing \"_Unknown limit_\", as it is unaware of the set ratelmits. After the first request, the returned ratelimit will be put in the text in the form of `remaining/limit`. If more than half the limit is remaining, the dot will be green. If less then half the limit is remaining, the dot will be yellow. If no limit is left, the dot will turn red.\nPlease keep in mind that the ratelimit will be reset after one hour, so you can send a new request after that hour.\n\nIf something is wrong in the API request, the dot will turn red\nand the message will contain the msg.payload with the error. This\nhappens typically when the API is temporally down for maintenance.",
        "category": "",
        "in": [
            {
                "x": 240,
                "y": 100,
                "wires": [
                    {
                        "id": "c8dc6aa14b9f3e92"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 760,
                "y": 260,
                "wires": [
                    {
                        "id": "2f42837904c91d73",
                        "port": 0
                    },
                    {
                        "id": "fcc8d69a3ab88e6d",
                        "port": 0
                    }
                ]
            },
            {
                "x": 770,
                "y": 340,
                "wires": [
                    {
                        "id": "5b0a430fb61e70e7",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "latitude",
                "type": "num",
                "value": "51.3",
                "ui": {
                    "icon": "font-awesome/fa-location-arrow",
                    "type": "input",
                    "opts": {
                        "types": [
                            "num"
                        ]
                    }
                }
            },
            {
                "name": "longitude",
                "type": "num",
                "value": "5.6",
                "ui": {
                    "icon": "font-awesome/fa-location-arrow",
                    "type": "input",
                    "opts": {
                        "types": [
                            "num"
                        ]
                    }
                }
            },
            {
                "name": "declination",
                "type": "num",
                "value": "37",
                "ui": {
                    "icon": "font-awesome/fa-chevron-up",
                    "type": "input",
                    "opts": {
                        "types": [
                            "num"
                        ]
                    }
                }
            },
            {
                "name": "azimuth",
                "type": "num",
                "value": "0",
                "ui": {
                    "icon": "font-awesome/fa-compass",
                    "type": "spinner",
                    "opts": {
                        "min": -180,
                        "max": 180
                    }
                }
            },
            {
                "name": "modules power",
                "type": "num",
                "value": "1",
                "ui": {
                    "icon": "font-awesome/fa-power-off",
                    "type": "input",
                    "opts": {
                        "types": [
                            "num"
                        ]
                    }
                }
            },
            {
                "name": "apikey",
                "type": "cred",
                "ui": {
                    "icon": "font-awesome/fa-key",
                    "type": "input",
                    "opts": {
                        "types": [
                            "cred"
                        ]
                    }
                }
            },
            {
                "name": "type",
                "type": "str",
                "value": "estimate",
                "ui": {
                    "label": {
                        "en-US": "type"
                    },
                    "type": "select",
                    "opts": {
                        "opts": [
                            {
                                "l": {
                                    "en-US": "Estimate"
                                },
                                "v": "estimate"
                            },
                            {
                                "l": {
                                    "en-US": "History"
                                },
                                "v": "history"
                            },
                            {
                                "l": {
                                    "en-US": "Clear sky"
                                },
                                "v": "clearsky"
                            }
                        ]
                    }
                }
            },
            {
                "name": "watt",
                "type": "str",
                "value": "watts",
                "ui": {
                    "icon": "font-awesome/fa-question-circle-o",
                    "type": "select",
                    "opts": {
                        "opts": [
                            {
                                "l": {
                                    "en-US": "Watts (power) average for the period"
                                },
                                "v": "watts"
                            },
                            {
                                "l": {
                                    "en-US": "Watt hours (energy) for the period"
                                },
                                "v": "watt_hours_period"
                            },
                            {
                                "l": {
                                    "en-US": "Watt hours (energy) summarized over the day"
                                },
                                "v": "watt_hours"
                            },
                            {
                                "l": {
                                    "en-US": "Watt hours (energy) summarized for each day"
                                },
                                "v": "watt_hours_day"
                            }
                        ]
                    }
                }
            },
            {
                "name": "kwhoutput",
                "type": "bool",
                "value": "false",
                "ui": {
                    "label": {
                        "en-US": "Output in kWh (in the graph)"
                    },
                    "type": "checkbox"
                }
            },
            {
                "name": "showtoday",
                "type": "bool",
                "value": "true",
                "ui": {
                    "label": {
                        "en-US": "Show todays forecast"
                    },
                    "type": "checkbox"
                }
            },
            {
                "name": "daystoforecast",
                "type": "str",
                "value": "-1",
                "ui": {
                    "label": {
                        "en-US": "Days to forecast"
                    },
                    "type": "select",
                    "opts": {
                        "opts": [
                            {
                                "l": {
                                    "en-US": "Max"
                                },
                                "v": "-1"
                            },
                            {
                                "l": {
                                    "en-US": "0"
                                },
                                "v": "0"
                            },
                            {
                                "l": {
                                    "en-US": "1"
                                },
                                "v": "1"
                            },
                            {
                                "l": {
                                    "en-US": "2"
                                },
                                "v": "2"
                            },
                            {
                                "l": {
                                    "en-US": "3"
                                },
                                "v": "3"
                            },
                            {
                                "l": {
                                    "en-US": "4"
                                },
                                "v": "4"
                            },
                            {
                                "l": {
                                    "en-US": "5"
                                },
                                "v": "5"
                            },
                            {
                                "l": {
                                    "en-US": "6"
                                },
                                "v": "6"
                            }
                        ]
                    }
                }
            },
            {
                "name": "widengraph",
                "type": "bool",
                "value": "true",
                "ui": {
                    "label": {
                        "en-US": "Widen graph"
                    },
                    "type": "checkbox"
                }
            }
        ],
        "meta": {
            "module": "Solar Forecast",
            "version": "0.0.9",
            "author": "dfaber@victronenergy.com",
            "desc": "Get solar forecasting per location",
            "keywords": "solar,forecast,api",
            "license": "GPL-3.0"
        },
        "color": "#FFCC66",
        "inputLabels": [
            "trigger"
        ],
        "outputLabels": [
            "output",
            "graph"
        ],
        "icon": "font-awesome/fa-sun-o",
        "status": {
            "x": 680,
            "y": 560,
            "wires": [
                {
                    "id": "1bfc1cde3ee94e4b",
                    "port": 0
                },
                {
                    "id": "a798fbe66cf133d5",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "aa30341bcc52e33c",
        "type": "mqtt-broker",
        "name": "Raspberry",
        "broker": "localhost",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "6b3d148bced0a7a4",
        "type": "ui_group",
        "name": "Huawei Netzteil",
        "tab": "e5b1aeb5977e428a",
        "order": 4,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "e5b1aeb5977e428a",
        "type": "ui_tab",
        "name": "Home",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "b6321adee0df3a3a",
        "type": "ui_base",
        "theme": {
            "name": "theme-dark",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#097479",
                    "value": "#097479",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#111111",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#0eb8c0",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#555555",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#eeeeee",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#333333",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD.MM.YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "b063cd9b987f7450",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "home_data",
        "name": "LocaleDB",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "1.x",
        "url": "http://localhost:8086",
        "rejectUnauthorized": true
    },
    {
        "id": "592b8cb1ef123066",
        "type": "tibber-api-endpoint",
        "queryUrl": "https://api.tibber.com/v1-beta/gql",
        "feedConnectionTimeout": "30",
        "feedTimeout": "60",
        "queryRequestTimeout": "30",
        "name": "Tibber-Malte"
    },
    {
        "id": "646a995fc1b49a9e",
        "type": "tls-config",
        "name": "",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "",
        "keyname": "",
        "caname": "",
        "servername": "",
        "verifyservercert": false,
        "alpnprotocol": ""
    },
    {
        "id": "55d02026703d8522",
        "type": "ui_group",
        "name": "Dynamic Power Limiter",
        "tab": "e5b1aeb5977e428a",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "756870f09af4bd03",
        "type": "ui_group",
        "name": "Tesla Solar Charger",
        "tab": "e5b1aeb5977e428a",
        "order": 5,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "6bb78d1c0e7e125e",
        "type": "ui_group",
        "name": "Vorhersage",
        "tab": "e5b1aeb5977e428a",
        "order": 6,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "c6e5f2ecf404d59e",
        "type": "ui_group",
        "name": "Übersicht",
        "tab": "e5b1aeb5977e428a",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "30f57a77d8fba331",
        "type": "ui_tab",
        "name": "Historie",
        "icon": "dashboard",
        "order": 2,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "d0745224b97dc204",
        "type": "ui_group",
        "name": "Charts",
        "tab": "30f57a77d8fba331",
        "order": 1,
        "disp": true,
        "width": "10",
        "collapse": false,
        "className": ""
    },
    {
        "id": "76927b91b4f8509b",
        "type": "ui_group",
        "name": "Grundeinstellungen",
        "tab": "e5b1aeb5977e428a",
        "order": 6,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "c706820c0d61f023",
        "type": "http request",
        "z": "93f485839dfa27a8",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 390,
        "y": 180,
        "wires": [
            [
                "1b5ccaa05d54f7c3"
            ]
        ]
    },
    {
        "id": "b9488734852cd0ca",
        "type": "function",
        "z": "93f485839dfa27a8",
        "name": "create forecast.solar url",
        "func": "msg.url = 'https://api.forecast.solar/';\n\nif (env.get('apikey')) {\n    msg.url += env.get('apikey') + '/';\n    }\n\nmsg.url += env.get('type') + '/';\n\nmsg.url += env.get('watt') + '/';\n\nmsg.url += env.get('latitude') + '/' +\n           env.get('longitude') + '/' +\n           env.get('declination') + '/' +\n           env.get('azimuth') + '/' +\n           env.get('modules power');\n\nmsg.topic = 'solar forecast: '+(env.get('type') || '');\nmsg.topic += (' '+env.get('watt') || '');\nif (env.get('kwhoutput')) {\n    msg.topic += ' (kWh)';\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 100,
        "wires": [
            [
                "975daf96f15cfb61"
            ]
        ]
    },
    {
        "id": "1b5ccaa05d54f7c3",
        "type": "json",
        "z": "93f485839dfa27a8",
        "name": "Convert to json",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 680,
        "y": 180,
        "wires": [
            [
                "e718a22973cc2864"
            ]
        ]
    },
    {
        "id": "559391d1288f762a",
        "type": "function",
        "z": "93f485839dfa27a8",
        "name": "update ratelimit",
        "func": "var remaining = msg.payload.message.ratelimit.remaining || 0;\nvar limit = msg.payload.message.ratelimit.limit;\n\nflow.set('forecast.solar.ratelimit.remaining', remaining)\nflow.set('forecast.solar.ratelimit.limit', limit)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 480,
        "wires": [
            [
                "e56826252134b93a"
            ]
        ]
    },
    {
        "id": "e718a22973cc2864",
        "type": "link out",
        "z": "93f485839dfa27a8",
        "name": "link out 1",
        "mode": "link",
        "links": [
            "3fa24f2d08195961",
            "0a20e852662c8cec"
        ],
        "x": 815,
        "y": 180,
        "wires": []
    },
    {
        "id": "3fa24f2d08195961",
        "type": "link in",
        "z": "93f485839dfa27a8",
        "name": "link in 1",
        "links": [
            "e718a22973cc2864"
        ],
        "x": 385,
        "y": 480,
        "wires": [
            [
                "559391d1288f762a"
            ]
        ]
    },
    {
        "id": "0a20e852662c8cec",
        "type": "link in",
        "z": "93f485839dfa27a8",
        "name": "link in 2",
        "links": [
            "e718a22973cc2864"
        ],
        "x": 225,
        "y": 260,
        "wires": [
            [
                "fcc8d69a3ab88e6d"
            ]
        ]
    },
    {
        "id": "4734b6f403e1f03e",
        "type": "inject",
        "z": "93f485839dfa27a8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 530,
        "y": 440,
        "wires": [
            [
                "e56826252134b93a"
            ]
        ]
    },
    {
        "id": "1bfc1cde3ee94e4b",
        "type": "function",
        "z": "93f485839dfa27a8",
        "name": "update status",
        "func": "var remaining = flow.get('forecast.solar.ratelimit.remaining') || -1;\nvar limit = flow.get('forecast.solar.ratelimit.limit') || -1\n\nvar text = remaining.toString() + '/' + limit.toString();\nvar fill = \"green\";\n\nif (remaining == 0) {\n    fill = \"red\";\n    text = \"Limit used\";\n}\n\nif (remaining > 0 && remaining < limit / 2) {\n    fill = \"yellow\"\n}\n\nif (remaining == -1 ) {\n    fill = \"blue\"\n    text = \"Limits unknown\"\n}\n\nmsg.payload = ({ fill: fill, text: text });\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "a18e96179ec2d987",
        "type": "function",
        "z": "93f485839dfa27a8",
        "name": "Create graph output",
        "func": "var m = {};\nm.labels = [];\nm.data = [];\n\nm.series = [];\nm.data = [];\nm.labels = [];\n\nfor (let j = 0; j <= msg.days; j++) {\n    m.data[j] = [];\n}\n\nif (msg.watt === 'watt_hours_day') {\n    var i = 0;\n    m.series.push(\"Watt hours per day\");\n    for (const key in msg.payload.result) {\n        m.labels.push(key);\n        if (msg.kwhoutput) {\n            m.data[i] = +(Math.round(msg.payload.result[key]/100)*.1).toFixed(1);\n        } else {\n            m.data[i] = msg.payload.result[key];\n        }\n        i++;\n    }\n    m.data = [m.data];\n    return { payload: [m] };\n}\n\nfor (let i = 0; i <= 23; i++) {\n\n    m.labels.push(i.toString()+':00');\n    if (msg.resolution === 4) {\n       m.labels.push(i.toString()+':15');\n    }\n    if (msg.resolution === 2 || msg.resolution == 4) {\n       m.labels.push(i.toString()+':30');\n    }\n    if (msg.resolution === 4) {\n       m.labels.push(i.toString()+':45');\n    }\n\n    for (let j = 0; j <= msg.days; j++) {\n        m.data[j].push(0);\n        if (msg.resolution === 4) {\n           m.data[j].push(0)\n        }\n        if (msg.resolution === 2 || msg.resolution == 4) {\n           m.data[j].push(0)\n        }\n        if (msg.resolution === 4) {\n           m.data[j].push(0)\n        }\n\n    }\n}\n\nvar offset = 0;\nfor (const key in msg.payload.result) {\n    var d = new Date(key)\n    if (m.series.indexOf(d.toISOString().split('T')[0]) === -1) {\n        m.series.push(d.toISOString().split('T')[0])\n    }\n\n    var h = d.getHours();\n    var minutes = d.getMinutes();\n\n    if (minutes === 0 ) {\n        offset = 0;\n    } else {\n        offset++;\n    }\n\n    if (msg.kwhoutput) {\n        m.data[m.series.length - 1][h*msg.resolution+offset] = +(Math.round(msg.payload.result[key]/100)*.1).toFixed(1);\n    } else {\n        m.data[m.series.length - 1][h*msg.resolution+offset] = msg.payload.result[key];\n    }\n}\n\nreturn { payload: [m] };\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 340,
        "wires": [
            [
                "5b0a430fb61e70e7"
            ]
        ]
    },
    {
        "id": "975daf96f15cfb61",
        "type": "link out",
        "z": "93f485839dfa27a8",
        "name": "link out 7",
        "mode": "link",
        "links": [
            "14f2e68e572f4ef8"
        ],
        "x": 805,
        "y": 100,
        "wires": []
    },
    {
        "id": "14f2e68e572f4ef8",
        "type": "link in",
        "z": "93f485839dfa27a8",
        "name": "link in 18",
        "links": [
            "975daf96f15cfb61"
        ],
        "x": 245,
        "y": 180,
        "wires": [
            [
                "c706820c0d61f023"
            ]
        ]
    },
    {
        "id": "c4307905e114824f",
        "type": "catch",
        "z": "93f485839dfa27a8",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 260,
        "y": 440,
        "wires": [
            [
                "f427f19392c399ce"
            ]
        ]
    },
    {
        "id": "e56826252134b93a",
        "type": "link out",
        "z": "93f485839dfa27a8",
        "name": "link out 8",
        "mode": "link",
        "links": [
            "dbaf8f5f5a920686"
        ],
        "x": 685,
        "y": 480,
        "wires": []
    },
    {
        "id": "dbaf8f5f5a920686",
        "type": "link in",
        "z": "93f485839dfa27a8",
        "name": "link in 19",
        "links": [
            "e56826252134b93a"
        ],
        "x": 385,
        "y": 580,
        "wires": [
            [
                "1bfc1cde3ee94e4b"
            ]
        ]
    },
    {
        "id": "f427f19392c399ce",
        "type": "link out",
        "z": "93f485839dfa27a8",
        "name": "link out 9",
        "mode": "link",
        "links": [
            "2ded0c14a222b4d9",
            "2f42837904c91d73"
        ],
        "x": 375,
        "y": 440,
        "wires": []
    },
    {
        "id": "2ded0c14a222b4d9",
        "type": "link in",
        "z": "93f485839dfa27a8",
        "name": "link in 20",
        "links": [
            "f427f19392c399ce"
        ],
        "x": 385,
        "y": 540,
        "wires": [
            [
                "a798fbe66cf133d5"
            ]
        ]
    },
    {
        "id": "a798fbe66cf133d5",
        "type": "function",
        "z": "93f485839dfa27a8",
        "name": "Set error status",
        "func": "node.warn(msg.payload)\nmsg.payload = ({ fill: \"red\", text: msg.payload });\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "2f42837904c91d73",
        "type": "link in",
        "z": "93f485839dfa27a8",
        "name": "link in 21",
        "links": [
            "f427f19392c399ce"
        ],
        "x": 665,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "fcc8d69a3ab88e6d",
        "type": "function",
        "z": "93f485839dfa27a8",
        "name": "Processed info",
        "func": "msg.resolution = 60;\nmsg.days = 1;\nmsg.type = env.get('type');\nmsg.watt = env.get('watt');\nmsg.kwhoutput = env.get('kwhoutput');\n\nvar key1 = Object.keys(msg.payload.result)[1];\nvar key2 = Object.keys(msg.payload.result)[2];\nvar key3 = Object.keys(msg.payload.result)[Object.keys(msg.payload.result).length-1];\n\nvar d1 = new Date(key1);\nvar d2 = new Date(key2); \nvar d3 = new Date(key3);\nmsg.resolution = 3600000 / (d2.getTime() - d1.getTime());\n\nmsg.days = Math.floor((d3.getTime() - d1.getTime()) / (1000 * 3600 * 24));\n\nif (msg.watt === 'watt_hours_day') {\n    msg.resolution = null;\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 260,
        "wires": [
            [
                "a18e96179ec2d987"
            ]
        ],
        "info": "Function to process the result from forecast.solar to add\nextra information, which is handy for either graphing or\nto store in a database.\n\n\nThe extra values added:\n- `msg.resolution` - The number of measurements per hour. If\nno API key is used, this will be 1. Other values may be 2 or 4.\n- `msg.days` - The number of days in the forcast. If no API\n- key is used this will be 1. Other values may be 3 or 6."
    },
    {
        "id": "5b0a430fb61e70e7",
        "type": "function",
        "z": "93f485839dfa27a8",
        "name": "Filter graph",
        "func": "var forecasted = msg.payload[0].series.length;\n\nif ((env.get('daystoforecast') > -1) && (env.get('daystoforecast') < forecasted)) {\n    for (i = 1; i < (forecasted - env.get('daystoforecast')); i++ ) {\n        msg.payload[0].data.pop();\n        msg.payload[0].series.pop();\n    }\n}\n\nif (env.get('watt') === 'watt_hours_day' ) {\n    forecasted = msg.payload[0].labels.length;\n    for (i = 1; i < (forecasted - env.get('daystoforecast')); i++ ) {\n        msg.payload[0].labels.pop();\n        msg.payload[0].data[0].pop();\n    }\n}\n\nif (!env.get('showtoday')) {\n    msg.payload[0].data.shift();\n    msg.payload[0].series.shift();\n}\n\nif (env.get('widengraph')) {\n    var c = msg.payload[0].labels.length;\n    var x = 0;\n    for (i = 0; i < c; i++) {\n        var remove = true;\n        for (d = 0; d < msg.payload[0].data.length; d++) {\n            if (msg.payload[0].data[d][x] > 0) {\n                remove = false;\n            }\n        }\n        if (remove) {\n            msg.payload[0].labels.splice(x, 1);\n            for (d = 0; d < msg.payload[0].data.length; d++) {\n                 msg.payload[0].data[d].splice(x, 1);\n            }\n            x--;\n        }\n        x++;\n    }\n    // Still the first and last datapoints should be zero, so\n    // add those again\n    msg.payload[0].labels.unshift('');\n    msg.payload[0].labels.push('');\n    for (d = 0; d < msg.payload[0].data.length; d++) {\n         msg.payload[0].data[d].unshift(0);\n         msg.payload[0].data[d].push(0);\n    }   \n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "c8dc6aa14b9f3e92",
        "type": "delay",
        "z": "93f485839dfa27a8",
        "name": "1 msg/15 minutes",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "15",
        "rateUnits": "minute",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 390,
        "y": 100,
        "wires": [
            [
                "b9488734852cd0ca"
            ]
        ]
    },
    {
        "id": "75c6443f65472958",
        "type": "mqtt in",
        "z": "6e0fbe3dc2362892",
        "name": "",
        "topic": "solar/battery/stateOfCharge",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "aa30341bcc52e33c",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 460,
        "y": 120,
        "wires": [
            [
                "836988e085fae016",
                "dba71b7baf7ae17c"
            ]
        ]
    },
    {
        "id": "836988e085fae016",
        "type": "change",
        "z": "6e0fbe3dc2362892",
        "name": "store",
        "rules": [
            {
                "t": "set",
                "p": "state.opendtu.soc",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 650,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "dba71b7baf7ae17c",
        "type": "ui_text",
        "z": "6e0fbe3dc2362892",
        "group": "c6e5f2ecf404d59e",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "SoC",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 650,
        "y": 160,
        "wires": []
    },
    {
        "id": "0a0ab44b432dd7d8",
        "type": "ui_text",
        "z": "6e0fbe3dc2362892",
        "group": "c6e5f2ecf404d59e",
        "order": 6,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "MPPT Leistung",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 660,
        "y": 440,
        "wires": []
    },
    {
        "id": "02ddcbdb41e78f25",
        "type": "ui_text",
        "z": "6e0fbe3dc2362892",
        "group": "c6e5f2ecf404d59e",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Inverter Leistung",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 670,
        "y": 320,
        "wires": []
    },
    {
        "id": "5fad30e33d583c70",
        "type": "ui_text",
        "z": "6e0fbe3dc2362892",
        "group": "c6e5f2ecf404d59e",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Hausverbauch",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 660,
        "y": 260,
        "wires": []
    },
    {
        "id": "e1a9cebc799ce18b",
        "type": "mqtt in",
        "z": "6e0fbe3dc2362892",
        "name": "",
        "topic": "solar/victron/HQ2235ANX7J/PPV",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "aa30341bcc52e33c",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 430,
        "y": 440,
        "wires": [
            [
                "0a0ab44b432dd7d8"
            ]
        ]
    },
    {
        "id": "1952a4cc576f49a5",
        "type": "mqtt in",
        "z": "6e0fbe3dc2362892",
        "name": "",
        "topic": "solar/ac/power",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "aa30341bcc52e33c",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 480,
        "y": 320,
        "wires": [
            [
                "02ddcbdb41e78f25"
            ]
        ]
    },
    {
        "id": "6a44e6869e2774aa",
        "type": "mqtt in",
        "z": "6e0fbe3dc2362892",
        "name": "Phase 1",
        "topic": "shellies/shellyem3-34945474A444/emeter/0/power",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "aa30341bcc52e33c",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 220,
        "y": 220,
        "wires": [
            [
                "c2804469f3645a0c"
            ]
        ]
    },
    {
        "id": "21c865939b63ad9c",
        "type": "mqtt in",
        "z": "6e0fbe3dc2362892",
        "name": "Phase 2",
        "topic": "shellies/shellyem3-34945474A444/emeter/1/power",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "aa30341bcc52e33c",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 220,
        "y": 260,
        "wires": [
            [
                "c2804469f3645a0c"
            ]
        ]
    },
    {
        "id": "7f0516d062758b66",
        "type": "mqtt in",
        "z": "6e0fbe3dc2362892",
        "name": "Phase 3",
        "topic": "shellies/shellyem3-34945474A444/emeter/2/power",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "aa30341bcc52e33c",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 220,
        "y": 300,
        "wires": [
            [
                "c2804469f3645a0c"
            ]
        ]
    },
    {
        "id": "c2804469f3645a0c",
        "type": "join",
        "z": "6e0fbe3dc2362892",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "3",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 350,
        "y": 260,
        "wires": [
            [
                "1b08792067a8d7bc"
            ]
        ]
    },
    {
        "id": "1b08792067a8d7bc",
        "type": "function",
        "z": "6e0fbe3dc2362892",
        "name": "function 11",
        "func": "let sum = 0;\n\nmsg.payload.map(x => sum += x);\n\nmsg.payload = sum.toFixed(2);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 260,
        "wires": [
            [
                "5fad30e33d583c70"
            ]
        ]
    },
    {
        "id": "807450773ccae49f",
        "type": "mqtt in",
        "z": "6e0fbe3dc2362892",
        "name": "",
        "topic": "solar/huawei/output_power",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "aa30341bcc52e33c",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 450,
        "y": 380,
        "wires": [
            [
                "8974accd87d29b80"
            ]
        ]
    },
    {
        "id": "8974accd87d29b80",
        "type": "ui_text",
        "z": "6e0fbe3dc2362892",
        "group": "c6e5f2ecf404d59e",
        "order": 5,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Huawei Leistung",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 670,
        "y": 380,
        "wires": []
    },
    {
        "id": "f960aa6ce5d65064",
        "type": "mqtt in",
        "z": "6e0fbe3dc2362892",
        "name": "",
        "topic": "solar/battery/alarm/#",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "aa30341bcc52e33c",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 150,
        "y": 560,
        "wires": [
            [
                "a8b9c2a40c96cb81"
            ]
        ]
    },
    {
        "id": "a8b9c2a40c96cb81",
        "type": "switch",
        "z": "6e0fbe3dc2362892",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 330,
        "y": 560,
        "wires": [
            [],
            [
                "753f80d55d088ce5"
            ]
        ]
    },
    {
        "id": "753f80d55d088ce5",
        "type": "trigger",
        "z": "6e0fbe3dc2362892",
        "name": "",
        "op1": "1",
        "op2": "0",
        "op1type": "num",
        "op2type": "num",
        "duration": "5",
        "extend": true,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 480,
        "y": 580,
        "wires": [
            [
                "249ce21883088b0a"
            ]
        ]
    },
    {
        "id": "249ce21883088b0a",
        "type": "ui_led",
        "z": "6e0fbe3dc2362892",
        "order": 7,
        "group": "c6e5f2ecf404d59e",
        "width": 0,
        "height": 0,
        "label": "Batterie Alarm",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "#ff0000",
                "value": "1",
                "valueType": "num"
            },
            {
                "color": "#008000",
                "value": "0",
                "valueType": "num"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showGlow": true,
        "name": "",
        "x": 630,
        "y": 580,
        "wires": []
    },
    {
        "id": "107a5b3d9d3bc004",
        "type": "inject",
        "z": "6e0fbe3dc2362892",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 290,
        "y": 600,
        "wires": [
            [
                "753f80d55d088ce5"
            ]
        ]
    },
    {
        "id": "f8b1b6db58b7944d",
        "type": "mqtt in",
        "z": "6e0fbe3dc2362892",
        "name": "",
        "topic": "solar/battery/warning/#",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "aa30341bcc52e33c",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 160,
        "y": 680,
        "wires": [
            [
                "06e0be6faaf7c709"
            ]
        ]
    },
    {
        "id": "06e0be6faaf7c709",
        "type": "switch",
        "z": "6e0fbe3dc2362892",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 330,
        "y": 680,
        "wires": [
            [],
            [
                "528caa2870bee72e"
            ]
        ]
    },
    {
        "id": "528caa2870bee72e",
        "type": "trigger",
        "z": "6e0fbe3dc2362892",
        "name": "",
        "op1": "1",
        "op2": "0",
        "op1type": "num",
        "op2type": "num",
        "duration": "5",
        "extend": true,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 480,
        "y": 700,
        "wires": [
            [
                "099793060a24169d"
            ]
        ]
    },
    {
        "id": "099793060a24169d",
        "type": "ui_led",
        "z": "6e0fbe3dc2362892",
        "order": 8,
        "group": "c6e5f2ecf404d59e",
        "width": 0,
        "height": 0,
        "label": "Batterie Warnung",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "#ff0000",
                "value": "1",
                "valueType": "num"
            },
            {
                "color": "#008000",
                "value": "0",
                "valueType": "num"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showGlow": true,
        "name": "",
        "x": 630,
        "y": 700,
        "wires": []
    },
    {
        "id": "31592649b7b4813e",
        "type": "inject",
        "z": "6e0fbe3dc2362892",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 290,
        "y": 720,
        "wires": [
            [
                "528caa2870bee72e"
            ]
        ]
    },
    {
        "id": "59cc811ac82cc763",
        "type": "change",
        "z": "6e0fbe3dc2362892",
        "name": "store",
        "rules": [
            {
                "t": "set",
                "p": "ui.opendtu.battery_full_soc",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 650,
        "y": 860,
        "wires": [
            []
        ]
    },
    {
        "id": "3cd9dbd67a0d7b0d",
        "type": "ui_numeric",
        "z": "6e0fbe3dc2362892",
        "name": "",
        "label": "Batterie voll bei SOC",
        "tooltip": "Grenze bei der die Batterie als voll betrachtet wird. Huawei schaltet 1% vorher ab. Power Limter schaltet bei diesem Stand auf aktiv ",
        "group": "76927b91b4f8509b",
        "order": 9,
        "width": 0,
        "height": 0,
        "wrap": false,
        "passthru": true,
        "topic": "topic",
        "topicType": "msg",
        "format": "{{value}}",
        "min": "80",
        "max": "100",
        "step": "1",
        "className": "",
        "x": 480,
        "y": 860,
        "wires": [
            [
                "59cc811ac82cc763"
            ]
        ]
    },
    {
        "id": "720e3ff6e2b3d775",
        "type": "change",
        "z": "6e0fbe3dc2362892",
        "name": "store",
        "rules": [
            {
                "t": "set",
                "p": "ui.opendtu.battery_capacity",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 650,
        "y": 900,
        "wires": [
            []
        ]
    },
    {
        "id": "3bac7bf8f23fd148",
        "type": "ui_numeric",
        "z": "6e0fbe3dc2362892",
        "name": "",
        "label": "Batteriekapazität",
        "tooltip": "",
        "group": "76927b91b4f8509b",
        "order": 9,
        "width": 0,
        "height": 0,
        "wrap": false,
        "passthru": true,
        "topic": "topic",
        "topicType": "msg",
        "format": "{{value}}",
        "min": "1000",
        "max": "15000",
        "step": "100",
        "className": "",
        "x": 490,
        "y": 900,
        "wires": [
            [
                "720e3ff6e2b3d775"
            ]
        ]
    },
    {
        "id": "58cc412415166577",
        "type": "function",
        "z": "7307d77d7f13453e",
        "name": "Strompreise der letzten zwei Wochen",
        "func": "// Store data for later use\ncontext.global.set(\"epex.two_week_data\", msg.payload.data);\n\n\n// Calculate the sum of the last 14 days' data\nvar sum = msg.payload.data.reduce(function (acc, data) {\n\n    return acc + data.marketprice;\n}, 0);\n\n// Calculate the running average\nvar average = sum / msg.payload.data.length;\n\n// Store the average in the message payload\nmsg.payload = average / 1000;\n\ncontext.global.set(\"epex.two_week_average\", average / 1000);\n\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 120,
        "wires": [
            [
                "c74550478b428bac"
            ]
        ]
    },
    {
        "id": "aadc5bafb016d33c",
        "type": "http request",
        "z": "7307d77d7f13453e",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://api.awattar.de/v1/marketdata?start={{{start}}}&end={{{end}}}",
        "tls": "646a995fc1b49a9e",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 550,
        "y": 120,
        "wires": [
            [
                "58cc412415166577"
            ]
        ]
    },
    {
        "id": "e54033c494f6e53b",
        "type": "inject",
        "z": "7307d77d7f13453e",
        "name": "Daily at 3pm",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "00 15 * * *",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 240,
        "y": 120,
        "wires": [
            [
                "19cfcf21465ae4b8"
            ]
        ]
    },
    {
        "id": "c74550478b428bac",
        "type": "debug",
        "z": "7307d77d7f13453e",
        "name": "debug 17",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1040,
        "y": 120,
        "wires": []
    },
    {
        "id": "19cfcf21465ae4b8",
        "type": "function",
        "z": "7307d77d7f13453e",
        "name": "function 8",
        "func": "\nmsg.end = msg.payload;\n\nmsg.start = msg.payload - 1209600000;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 120,
        "wires": [
            [
                "aadc5bafb016d33c"
            ]
        ]
    },
    {
        "id": "7e4cd656.31676",
        "type": "inject",
        "z": "7307d77d7f13453e",
        "name": "Every Minute",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 240,
        "y": 320,
        "wires": [
            [
                "301f1c1fc3d604ec"
            ]
        ]
    },
    {
        "id": "301f1c1fc3d604ec",
        "type": "function",
        "z": "7307d77d7f13453e",
        "name": "Aktuellen Strompreis ermitteln",
        "func": "// Store data for later use\nvar prices = context.global.get('epex.current_data.data') || 0;\n\nvar now = Date.now();\n\n// Set this to a save value\nvar current_price = {\"marketprice\": 0.3};\n\nprices.forEach((price) => {\n    if (price.end_timestamp > now && price.start_timestamp < now) {\n        current_price = price;\n    }\n});\n\n// We output in ct / kwh but store in euro / kwh here\nmsg.payload = (current_price.marketprice / 10).toFixed(2);\ncontext.global.set(\"epex.current_price\", current_price.marketprice / 1000);\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 320,
        "wires": [
            [
                "53670f6c80abd656",
                "0a5f898b501fcc26"
            ]
        ]
    },
    {
        "id": "53670f6c80abd656",
        "type": "debug",
        "z": "7307d77d7f13453e",
        "name": "debug 20",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1040,
        "y": 320,
        "wires": []
    },
    {
        "id": "1483064eb6cb5a60",
        "type": "http request",
        "z": "7307d77d7f13453e",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://api.awattar.de/v1/marketdata",
        "tls": "646a995fc1b49a9e",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 550,
        "y": 160,
        "wires": [
            [
                "de2c4b11912cb70c"
            ]
        ]
    },
    {
        "id": "b0aa7d946725cee5",
        "type": "inject",
        "z": "7307d77d7f13453e",
        "name": "Daily",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "00 00 * * *",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 250,
        "y": 160,
        "wires": [
            [
                "1483064eb6cb5a60"
            ]
        ]
    },
    {
        "id": "fe4cd0fefa54e8f8",
        "type": "debug",
        "z": "7307d77d7f13453e",
        "name": "debug 21",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1040,
        "y": 160,
        "wires": []
    },
    {
        "id": "0a5f898b501fcc26",
        "type": "ui_text",
        "z": "7307d77d7f13453e",
        "group": "c6e5f2ecf404d59e",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Strompreis (ct)",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 1070,
        "y": 380,
        "wires": []
    },
    {
        "id": "5ee08ef605507b67",
        "type": "function",
        "z": "7307d77d7f13453e",
        "name": "Diagram format",
        "func": "let prices_today = context.global.get(\"epex.daily_data.data\");\nif (prices_today.length === 0) {\n  return;\n}\n\nlet series = [\"Strompreis\"]\nlet data = [ [] ]\nlet labels = []\n\nprices_today.forEach((price) => {\n    data[0].push(price.marketprice / 10);\n\n    const d = new Date(price.start_timestamp);\n    const hour = d.getHours();\n    labels.push(hour);\n});\n\nmsg.payload = [{\n    labels,\n    data,\n    series\n    }]\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 200,
        "wires": [
            [
                "09c11a74f272edb9",
                "52864010802b9db2"
            ]
        ]
    },
    {
        "id": "09c11a74f272edb9",
        "type": "debug",
        "z": "7307d77d7f13453e",
        "name": "debug 31",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1220,
        "y": 160,
        "wires": []
    },
    {
        "id": "52864010802b9db2",
        "type": "ui_chart",
        "z": "7307d77d7f13453e",
        "name": "",
        "group": "6bb78d1c0e7e125e",
        "order": 1,
        "width": 0,
        "height": 0,
        "label": "Strompreis",
        "chartType": "bar",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": true,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1230,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "c5b05799c45b58d6",
        "type": "http request",
        "z": "7307d77d7f13453e",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://api.awattar.de/v1/marketdata",
        "tls": "646a995fc1b49a9e",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 550,
        "y": 260,
        "wires": [
            [
                "ab265151d2ad61a3"
            ]
        ]
    },
    {
        "id": "271f90f04e23cda8",
        "type": "inject",
        "z": "7307d77d7f13453e",
        "name": "Every 6h",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "21600",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 240,
        "y": 260,
        "wires": [
            [
                "c5b05799c45b58d6"
            ]
        ]
    },
    {
        "id": "9cec67dc3cfdeb32",
        "type": "debug",
        "z": "7307d77d7f13453e",
        "name": "debug 32",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1040,
        "y": 260,
        "wires": []
    },
    {
        "id": "de2c4b11912cb70c",
        "type": "change",
        "z": "7307d77d7f13453e",
        "name": "Store",
        "rules": [
            {
                "t": "set",
                "p": "epex.daily_data",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 690,
        "y": 160,
        "wires": [
            [
                "fe4cd0fefa54e8f8",
                "5ee08ef605507b67"
            ]
        ]
    },
    {
        "id": "ab265151d2ad61a3",
        "type": "change",
        "z": "7307d77d7f13453e",
        "name": "Store",
        "rules": [
            {
                "t": "set",
                "p": "epex.current_data",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 690,
        "y": 260,
        "wires": [
            [
                "9cec67dc3cfdeb32"
            ]
        ]
    },
    {
        "id": "f1922c7b5d83a0e9",
        "type": "mqtt in",
        "z": "683fd7.e63da028",
        "name": "",
        "topic": "sbfspot_2130252068",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "aa30341bcc52e33c",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 180,
        "y": 140,
        "wires": [
            [
                "74938cbb9221e0a6"
            ]
        ]
    },
    {
        "id": "74938cbb9221e0a6",
        "type": "join",
        "z": "683fd7.e63da028",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "1",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 430,
        "y": 140,
        "wires": [
            [
                "731a26f1ddd966be",
                "4fc39bcadd3b5e49"
            ]
        ]
    },
    {
        "id": "4fc39bcadd3b5e49",
        "type": "debug",
        "z": "683fd7.e63da028",
        "name": "debug 23",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 600,
        "y": 220,
        "wires": []
    },
    {
        "id": "731a26f1ddd966be",
        "type": "function",
        "z": "683fd7.e63da028",
        "name": "function 13",
        "func": "var payload = msg.payload; //get payload\n\nvar smaPower = 0;\nif (payload.sbfspot_2130252068) {\n    smaPower = payload.sbfspot_2130252068.PACTot;\n}\nvar hoymilesPower = payload[\"solar/116183074682/0/power\"] || 0;\n\nmsg.payload = {\n    Momentanleistung: smaPower + hoymilesPower\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 140,
        "wires": [
            [
                "da4da63f2a30635a",
                "255699f9f3c032dd"
            ]
        ]
    },
    {
        "id": "da4da63f2a30635a",
        "type": "mqtt out",
        "z": "683fd7.e63da028",
        "name": "",
        "topic": "home/power/solarTotal",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "aa30341bcc52e33c",
        "x": 800,
        "y": 140,
        "wires": []
    },
    {
        "id": "255699f9f3c032dd",
        "type": "debug",
        "z": "683fd7.e63da028",
        "name": "debug 24",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 800,
        "y": 220,
        "wires": []
    },
    {
        "id": "35951ce89ce8800c",
        "type": "mqtt in",
        "z": "683fd7.e63da028",
        "name": "",
        "topic": "solar/116183074682/0/power",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "aa30341bcc52e33c",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 160,
        "y": 200,
        "wires": [
            [
                "74938cbb9221e0a6"
            ]
        ]
    },
    {
        "id": "8ff4394bc7143c86",
        "type": "function",
        "z": "8a1442584b5c9904",
        "name": "Transform",
        "func": "var soc = global.get('state.opendtu.soc') || 0;\nvar epex_current_price = global.get('epex.current_price') || 0.3;\nvar dpl_X_price = global.get('ui.opendtu.dpl_X_price') / 100 || 0.3;\nvar car_X_price = global.get('ui.opendtu.car_X_price') / 100 || 0.3;\nvar battery_full_soc = global.get('ui.opendtu.battery_full_soc') || 90;\nvar carState = global.get('state.car') || false;\n\nvar msg = {};\nmsg.payload = 0\n\n// Enable if battery is full\nif (soc >= battery_full_soc) {\n    msg.payload = 0;  // Fully enable\n    msg.text = \"Aktiv - Batterie voll\";\n    return msg;\n}\n\n// Disable if price low\nif (epex_current_price < dpl_X_price) {\n    msg.payload = 1;  // Fully disable\n    msg.text = \"Inaktiv / Strompreis niedrig\";\n    return msg;\n}\n\nif (carState == \"charging\") {\n    // Disable if price below crossover for car and car is charging\n    if (epex_current_price < car_X_price) {\n        msg.payload = 1;  // Fully disable\n        msg.text = \"Inaktiv / Auto läd / Strompreis niedrig\";\n    } else {\n        msg.payload = 2;  // Enable solar passthrough\n        msg.text = \"Solar Passthrough zum Auto\";\n    }\n    return msg;\n}\n\nmsg.payload = 0;  // Normal operation\nmsg.text = \"Aktiv\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 120,
        "wires": [
            [
                "bff9a5dd3d451de1",
                "53096ea9d7083ef1",
                "b505dea9d6112b4b"
            ]
        ]
    },
    {
        "id": "bff9a5dd3d451de1",
        "type": "mqtt out",
        "z": "8a1442584b5c9904",
        "name": "",
        "topic": "solar/powerlimiter/cmd/mode",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "aa30341bcc52e33c",
        "x": 1180,
        "y": 120,
        "wires": []
    },
    {
        "id": "6ef0e8c829fc673f",
        "type": "inject",
        "z": "8a1442584b5c9904",
        "name": "periodic trigger",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 800,
        "y": 120,
        "wires": [
            [
                "8ff4394bc7143c86"
            ]
        ]
    },
    {
        "id": "53096ea9d7083ef1",
        "type": "debug",
        "z": "8a1442584b5c9904",
        "name": "debug 18",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1120,
        "y": 240,
        "wires": []
    },
    {
        "id": "d6ae3af4d53574d0",
        "type": "change",
        "z": "8a1442584b5c9904",
        "name": "store",
        "rules": [
            {
                "t": "set",
                "p": "ui.opendtu.dpl_X_price",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 510,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "c3b8dccef33a484a",
        "type": "change",
        "z": "8a1442584b5c9904",
        "name": "store",
        "rules": [
            {
                "t": "set",
                "p": "ui.opendtu.car_X_price",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 510,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "b505dea9d6112b4b",
        "type": "ui_text",
        "z": "8a1442584b5c9904",
        "group": "55d02026703d8522",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Status:",
        "format": "{{msg.text}}",
        "layout": "row-spread",
        "className": "",
        "x": 1120,
        "y": 180,
        "wires": []
    },
    {
        "id": "ae6d65948cd7e076",
        "type": "ui_numeric",
        "z": "8a1442584b5c9904",
        "name": "",
        "label": "DPL aktiv ab",
        "tooltip": "Liegt der Strompreis unter dieser Grenze wird der Power limiter abgeschaltet",
        "group": "55d02026703d8522",
        "order": 3,
        "width": 0,
        "height": 0,
        "wrap": false,
        "passthru": true,
        "topic": "topic",
        "topicType": "msg",
        "format": "{{value}}",
        "min": "-10",
        "max": "30",
        "step": "0.1",
        "className": "",
        "x": 370,
        "y": 120,
        "wires": [
            [
                "d6ae3af4d53574d0"
            ]
        ]
    },
    {
        "id": "4325ec05ae13ac80",
        "type": "ui_numeric",
        "z": "8a1442584b5c9904",
        "name": "",
        "label": "Solar PT zum Auto ab",
        "tooltip": "Liegt der Strompreis über dem eingestellten Wert wird Solarstrom (Solar Passthrough) zum Auto laden verwendet. Darunter wird die Solarenergie im Hausakku gespeichert",
        "group": "55d02026703d8522",
        "order": 4,
        "width": 0,
        "height": 0,
        "wrap": false,
        "passthru": true,
        "topic": "topic",
        "topicType": "msg",
        "format": "{{value}}",
        "min": "-10",
        "max": "30",
        "step": "0.1",
        "className": "",
        "x": 340,
        "y": 160,
        "wires": [
            [
                "c3b8dccef33a484a"
            ]
        ]
    },
    {
        "id": "ff2111eb145eab38",
        "type": "ui_text",
        "z": "8a1442584b5c9904",
        "group": "55d02026703d8522",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Strompreisgrenzen",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 350,
        "y": 80,
        "wires": []
    },
    {
        "id": "acc5f7d8e2b1ce1b",
        "type": "inject",
        "z": "c5224d76f6a6e37e",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "00 06 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 330,
        "y": 100,
        "wires": [
            [
                "ed09290d7247493f",
                "a419cca191cf5257",
                "39857a5c78a714c9"
            ]
        ]
    },
    {
        "id": "ed09290d7247493f",
        "type": "subflow:93f485839dfa27a8",
        "z": "c5224d76f6a6e37e",
        "name": "Dach Ost",
        "env": [
            {
                "name": "latitude",
                "value": "49.45",
                "type": "num"
            },
            {
                "name": "longitude",
                "value": "11.07",
                "type": "num"
            },
            {
                "name": "declination",
                "value": "30",
                "type": "num"
            },
            {
                "name": "azimuth",
                "value": "-96",
                "type": "num"
            },
            {
                "name": "modules power",
                "value": "2.8",
                "type": "num"
            },
            {
                "name": "apikey",
                "type": "cred"
            }
        ],
        "x": 500,
        "y": 100,
        "wires": [
            [
                "132dda17457d1021",
                "81045e0c2f41f89d"
            ],
            [
                "8aea8c1947cefbd9"
            ]
        ]
    },
    {
        "id": "132dda17457d1021",
        "type": "debug",
        "z": "c5224d76f6a6e37e",
        "name": "debug 2",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 760,
        "y": 60,
        "wires": []
    },
    {
        "id": "a419cca191cf5257",
        "type": "subflow:93f485839dfa27a8",
        "z": "c5224d76f6a6e37e",
        "name": "Garage",
        "env": [
            {
                "name": "latitude",
                "value": "49.45",
                "type": "num"
            },
            {
                "name": "longitude",
                "value": "11.07",
                "type": "num"
            },
            {
                "name": "declination",
                "value": "20",
                "type": "num"
            },
            {
                "name": "azimuth",
                "value": "-6",
                "type": "num"
            },
            {
                "name": "modules power",
                "value": "1.6",
                "type": "num"
            },
            {
                "name": "apikey",
                "type": "cred"
            }
        ],
        "x": 520,
        "y": 400,
        "wires": [
            [
                "68fca3cbbc48a448",
                "c0a68175e8ae65d1"
            ],
            [
                "1e1b136e5f6420bd",
                "cb77583e6ab03dfd"
            ]
        ]
    },
    {
        "id": "1e1b136e5f6420bd",
        "type": "ui_chart",
        "z": "c5224d76f6a6e37e",
        "name": "",
        "group": "6bb78d1c0e7e125e",
        "order": 2,
        "width": 0,
        "height": 0,
        "label": "Garage",
        "chartType": "line",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 780,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "68fca3cbbc48a448",
        "type": "debug",
        "z": "c5224d76f6a6e37e",
        "name": "debug 3",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 780,
        "y": 360,
        "wires": []
    },
    {
        "id": "39857a5c78a714c9",
        "type": "subflow:93f485839dfa27a8",
        "z": "c5224d76f6a6e37e",
        "name": "Dach West",
        "env": [
            {
                "name": "latitude",
                "value": "49.45",
                "type": "num"
            },
            {
                "name": "longitude",
                "value": "11.07",
                "type": "num"
            },
            {
                "name": "declination",
                "value": "30",
                "type": "num"
            },
            {
                "name": "azimuth",
                "value": "84",
                "type": "num"
            },
            {
                "name": "modules power",
                "value": "2.9",
                "type": "num"
            },
            {
                "name": "apikey",
                "type": "cred"
            }
        ],
        "x": 510,
        "y": 240,
        "wires": [
            [
                "eae9572da1f4cdf7",
                "4f6868a91687e6e7"
            ],
            [
                "05d8bd0b2dbb4790"
            ]
        ]
    },
    {
        "id": "eae9572da1f4cdf7",
        "type": "debug",
        "z": "c5224d76f6a6e37e",
        "name": "debug 4",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 760,
        "y": 200,
        "wires": []
    },
    {
        "id": "5cdfe98ec1d92341",
        "type": "inject",
        "z": "c5224d76f6a6e37e",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "00 07 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "ost",
        "payload": "forecast.east",
        "payloadType": "global",
        "x": 340,
        "y": 580,
        "wires": [
            [
                "1fceb6f9ed7299e6"
            ]
        ]
    },
    {
        "id": "9fbd2ba35a83c036",
        "type": "inject",
        "z": "c5224d76f6a6e37e",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "00 07 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "sued",
        "payload": "forecast.garage",
        "payloadType": "global",
        "x": 350,
        "y": 620,
        "wires": [
            [
                "1fceb6f9ed7299e6"
            ]
        ]
    },
    {
        "id": "4a6fd874fc1bfd18",
        "type": "inject",
        "z": "c5224d76f6a6e37e",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "00 07 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "west",
        "payload": "forecast.west",
        "payloadType": "global",
        "x": 340,
        "y": 660,
        "wires": [
            [
                "1fceb6f9ed7299e6"
            ]
        ]
    },
    {
        "id": "1fceb6f9ed7299e6",
        "type": "join",
        "z": "c5224d76f6a6e37e",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "3",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 590,
        "y": 620,
        "wires": [
            [
                "8cef9b826c56a8a9"
            ]
        ]
    },
    {
        "id": "8cef9b826c56a8a9",
        "type": "debug",
        "z": "c5224d76f6a6e37e",
        "name": "debug 5",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 780,
        "y": 620,
        "wires": []
    },
    {
        "id": "4f6868a91687e6e7",
        "type": "change",
        "z": "c5224d76f6a6e37e",
        "name": "store",
        "rules": [
            {
                "t": "set",
                "p": "forecast.west",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 750,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "c0a68175e8ae65d1",
        "type": "change",
        "z": "c5224d76f6a6e37e",
        "name": "store",
        "rules": [
            {
                "t": "set",
                "p": "forecast.garage",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 770,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "81045e0c2f41f89d",
        "type": "change",
        "z": "c5224d76f6a6e37e",
        "name": "store",
        "rules": [
            {
                "t": "set",
                "p": "forecast.east",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 750,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "8aea8c1947cefbd9",
        "type": "change",
        "z": "c5224d76f6a6e37e",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "solar.east",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 800,
        "y": 140,
        "wires": [
            [
                "6c01e64ec20ed31c"
            ]
        ]
    },
    {
        "id": "05d8bd0b2dbb4790",
        "type": "change",
        "z": "c5224d76f6a6e37e",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "solar.west",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 800,
        "y": 280,
        "wires": [
            [
                "6c01e64ec20ed31c"
            ]
        ]
    },
    {
        "id": "6c01e64ec20ed31c",
        "type": "function",
        "z": "c5224d76f6a6e37e",
        "name": "Combine multiple inputs",
        "func": "let solar = flow.get('solar') || []\nif (solar.length === 0) {\n  return;\n}\n\nlet series = []\nlet data = []\nlet labels = []\n\n// Get array length (hours of sunshine)\nlet first_key = Object.keys(solar)[0]\nlet data_length = solar[first_key][0].data[0].length;\n\n// West / ost\nsolar[first_key][0].series.forEach(function(day, day_index) {\n    data[day_index] = [];\n    solar[first_key][0].labels.forEach(function (hour, hour_index) {\n        let sum = 0;\n        for (const key in solar) {\n            sum += solar[key][0].data[day_index][hour_index]\n        }\n        data[day_index].push(sum)\n    });\n    series.push(day);\n});\n\nsolar[first_key][0].labels.forEach(function (hour, hour_index) {\n    labels.push(hour)\n});\n\nmsg.payload = [{\n    labels,\n    data,\n    series\n    }]\n\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 200,
        "wires": [
            [
                "4740b48eec9226b3",
                "469f2510594bf15a"
            ]
        ]
    },
    {
        "id": "cb77583e6ab03dfd",
        "type": "debug",
        "z": "c5224d76f6a6e37e",
        "name": "debug 29",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 780,
        "y": 500,
        "wires": []
    },
    {
        "id": "4740b48eec9226b3",
        "type": "debug",
        "z": "c5224d76f6a6e37e",
        "name": "debug 30",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1280,
        "y": 220,
        "wires": []
    },
    {
        "id": "469f2510594bf15a",
        "type": "ui_chart",
        "z": "c5224d76f6a6e37e",
        "name": "",
        "group": "6bb78d1c0e7e125e",
        "order": 3,
        "width": 0,
        "height": 0,
        "label": "Dach",
        "chartType": "line",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1270,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "010a9cca9692b436",
        "type": "function",
        "z": "cac5d58849cb543a",
        "name": "Transform",
        "func": "var soc = global.get('state.opendtu.soc') || 0;\nvar forecast = global.get('forecast.garage.result') || {};\n\nvar epex_current_price = global.get('epex.current_price');\nif (typeof epex_current_price == \"undefined\") {\n    epex_current_price = 0.3;\n}\n\nvar huawei_X_price = global.get('ui.opendtu.huawei_X_price');\nif (typeof huawei_X_price == \"undefined\") {\n    huawei_X_price = 0.3;\n} else {\n    huawei_X_price = huawei_X_price / 100;\n}\n\nvar huawei_charging_current = global.get('ui.opendtu.huawei_charging_current') || 10;\nvar huawei_charging_voltage = global.get('ui.opendtu.huawei_charging_voltage') || 42;\nvar battery_full_soc = global.get('ui.opendtu.battery_full_soc') || 90;\nvar battery_capacity = global.get('ui.opendtu.battery_capacity') || 4800;\n\nvar msg = {};\nmsg.payload = 0\n\n// Turn off if battery is full\nif (soc >= (battery_full_soc - 1)) {\n    msg.payload = 2;  // Let openDTU disable the PSU ... \n    msg.current = 0;  // ... as we set current to 0A here\n    msg.text = \"Inaktiv - Batterie voll\";\n    return msg;\n}\n\n// Enable full power if price is low\nif (epex_current_price < huawei_X_price) {\n    msg.payload = 2;  // Let openDTU enable\n    msg.current = huawei_charging_current;\n    msg.voltage = huawei_charging_voltage;\n    msg.text = \"Strompreis niedrig - Volle Leistung\";\n    return msg;\n}\n\n\n// Check expected energy\n// Get the current date and time\nconst currentDate = new Date();\nvar expected_energy = 0;\nfor (const timestamp_string in forecast) {\n\n    // Convert the timestamp string into a Date object\n    const timestamp = new Date(timestamp_string);\n\n    // Sum energy if timestamp is today in the future\n    if (timestamp > currentDate && \n        timestamp.getDate() === currentDate.getDate()) {\n        expected_energy += forecast[timestamp_string];\n    } \n}\n\n//node.warn(\"Expected: \" + expected_energy);\nif (expected_energy * 0.7 < (battery_capacity * (100 - soc) / 100)) {\n    msg.payload = 3;  // Use auto power in this case\n    msg.current = 0;  \n    msg.text = \"Automatisch\";\n    return msg;\n}\n\nmsg.payload = 2;  // Let openDTU disable the PSU ...\nmsg.current = 0;  // ... as we set current to 0A here\nmsg.text = \"Inaktiv\";\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 400,
        "wires": [
            [
                "b7db5d17099fb8b9",
                "01d5eeaeb8b0608c",
                "7d08df32116b9a40",
                "6e7d2ea40a060edd",
                "2d77315978d8b11f"
            ]
        ]
    },
    {
        "id": "2d77315978d8b11f",
        "type": "mqtt out",
        "z": "cac5d58849cb543a",
        "name": "",
        "topic": "solar/huawei/cmd/mode",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "aa30341bcc52e33c",
        "x": 1010,
        "y": 400,
        "wires": []
    },
    {
        "id": "2b7eb4d8ad0cf6fa",
        "type": "change",
        "z": "cac5d58849cb543a",
        "name": "store",
        "rules": [
            {
                "t": "set",
                "p": "ui.opendtu.huawei_X_price",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 470,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "23f64190f6451f4e",
        "type": "change",
        "z": "cac5d58849cb543a",
        "name": "store",
        "rules": [
            {
                "t": "set",
                "p": "ui.opendtu.huawei_charging_current",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 470,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "b7db5d17099fb8b9",
        "type": "debug",
        "z": "cac5d58849cb543a",
        "name": "debug 25",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 760,
        "y": 360,
        "wires": []
    },
    {
        "id": "6b6c53544686444f",
        "type": "inject",
        "z": "cac5d58849cb543a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 210,
        "y": 400,
        "wires": [
            [
                "010a9cca9692b436"
            ]
        ]
    },
    {
        "id": "01d5eeaeb8b0608c",
        "type": "change",
        "z": "cac5d58849cb543a",
        "name": "Current",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "current",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 760,
        "y": 480,
        "wires": [
            [
                "9b31d085f493b9f6",
                "07d51d1ac278ccb6"
            ]
        ]
    },
    {
        "id": "9b31d085f493b9f6",
        "type": "debug",
        "z": "cac5d58849cb543a",
        "name": "debug 26",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 920,
        "y": 460,
        "wires": []
    },
    {
        "id": "7d08df32116b9a40",
        "type": "ui_text",
        "z": "cac5d58849cb543a",
        "group": "6b3d148bced0a7a4",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Status",
        "format": "{{msg.text}}",
        "layout": "row-spread",
        "className": "",
        "x": 730,
        "y": 600,
        "wires": []
    },
    {
        "id": "07d51d1ac278ccb6",
        "type": "mqtt out",
        "z": "cac5d58849cb543a",
        "name": "",
        "topic": "solar/huawei/cmd/limit_online_current",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "aa30341bcc52e33c",
        "x": 1210,
        "y": 480,
        "wires": []
    },
    {
        "id": "6a06404112773814",
        "type": "change",
        "z": "cac5d58849cb543a",
        "name": "store",
        "rules": [
            {
                "t": "set",
                "p": "ui.opendtu.huawei_charging_voltage",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 470,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "de87835998115101",
        "type": "mqtt out",
        "z": "cac5d58849cb543a",
        "name": "",
        "topic": "solar/huawei/cmd/limit_online_voltage",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "aa30341bcc52e33c",
        "x": 1210,
        "y": 540,
        "wires": []
    },
    {
        "id": "6e7d2ea40a060edd",
        "type": "change",
        "z": "cac5d58849cb543a",
        "name": "Voltage",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "voltage",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 760,
        "y": 540,
        "wires": [
            [
                "de87835998115101"
            ]
        ]
    },
    {
        "id": "a12d552a3f5373c2",
        "type": "ui_numeric",
        "z": "cac5d58849cb543a",
        "name": "",
        "label": "Voll aktiv ab Strompreis",
        "tooltip": "Liegt der Strompreis unter dieser Grenze wird das Netzteil mit gewählter Leistung gestartet",
        "group": "6b3d148bced0a7a4",
        "order": 2,
        "width": 0,
        "height": 0,
        "wrap": false,
        "passthru": true,
        "topic": "topic",
        "topicType": "msg",
        "format": "{{value}}",
        "min": "-10",
        "max": "15",
        "step": "0.1",
        "className": "",
        "x": 250,
        "y": 60,
        "wires": [
            [
                "2b7eb4d8ad0cf6fa"
            ]
        ]
    },
    {
        "id": "48abe7daaebb67ef",
        "type": "ui_numeric",
        "z": "cac5d58849cb543a",
        "name": "",
        "label": "Ladespannung",
        "tooltip": "",
        "group": "6b3d148bced0a7a4",
        "order": 3,
        "width": 0,
        "height": 0,
        "wrap": false,
        "passthru": true,
        "topic": "topic",
        "topicType": "msg",
        "format": "{{value}}",
        "min": "42",
        "max": "58",
        "step": "0.1",
        "className": "",
        "x": 280,
        "y": 180,
        "wires": [
            [
                "6a06404112773814"
            ]
        ]
    },
    {
        "id": "bef08713c953f746",
        "type": "ui_numeric",
        "z": "cac5d58849cb543a",
        "name": "",
        "label": "Ladestrom",
        "tooltip": "",
        "group": "6b3d148bced0a7a4",
        "order": 4,
        "width": 0,
        "height": 0,
        "wrap": false,
        "passthru": true,
        "topic": "topic",
        "topicType": "msg",
        "format": "{{value}}",
        "min": "1",
        "max": "56",
        "step": "1",
        "className": "",
        "x": 290,
        "y": 120,
        "wires": [
            [
                "23f64190f6451f4e"
            ]
        ]
    },
    {
        "id": "4ec712897913b81b",
        "type": "mqtt in",
        "z": "bb10d8ab69b25398",
        "name": "",
        "topic": "teslamate/cars/1/state",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "aa30341bcc52e33c",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 960,
        "y": 60,
        "wires": [
            [
                "968e9679d29e92f4"
            ]
        ]
    },
    {
        "id": "968e9679d29e92f4",
        "type": "change",
        "z": "bb10d8ab69b25398",
        "name": "car_state",
        "rules": [
            {
                "t": "set",
                "p": "state.car",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1160,
        "y": 60,
        "wires": [
            [
                "301e7325b64f48be"
            ]
        ]
    },
    {
        "id": "301e7325b64f48be",
        "type": "ui_text",
        "z": "bb10d8ab69b25398",
        "group": "756870f09af4bd03",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Car State",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 1340,
        "y": 60,
        "wires": []
    },
    {
        "id": "b1eb87f8019b640f",
        "type": "change",
        "z": "bb10d8ab69b25398",
        "name": "store",
        "rules": [
            {
                "t": "set",
                "p": "ui.tsc.car_X_price",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 590,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "eec996d2fe78177d",
        "type": "function",
        "z": "bb10d8ab69b25398",
        "name": "Transform",
        "func": "var epex_current_price = global.get('epex.current_price');\nif (typeof epex_current_price == \"undefined\") {\n    epex_current_price = 0.3;\n}\n\nvar car_X_price = global.get('ui.tsc.car_X_price') || 0;\ncar_X_price = car_X_price / 100; // convert to euros\nvar maximum_power_enabled = flow.get('maximum_power_enabled') || false;\n\nvar msg = {};\nmsg.payload = 0\n\n// Enable full power if price is low\nif (epex_current_price < car_X_price && !maximum_power_enabled) {\n\n    var current_settings = flow.get('tsc.car_settings');\n    if (typeof current_settings == \"undefined\") {\n        // TODO\n    }\n    flow.set(\"old_charge_mode\", current_settings[1].chargeMode);\n    current_settings[1].chargeMode = 0;\n    msg.payload = JSON.stringify(current_settings[1]);\n    msg.headers = {};\n    msg.headers['Content-Type'] = 'application/json';\n    msg.text = \"Volle Leistung\";\n    flow.set(\"maximum_power_enabled\", true);\n    return msg;\n}\n\n// Restore charge mode if price is high\nif (epex_current_price > car_X_price && maximum_power_enabled) {\n    \n    var current_settings = flow.get('tsc.car_settings');\n    if (typeof current_settings == \"undefined\") {\n        // TODO\n    }\n\n    current_settings[1].chargeMode = flow.get(\"old_charge_mode\") || 0;\n    msg.payload = JSON.stringify(current_settings[1]);\n    msg.headers = {};\n    msg.headers['Content-Type'] = 'application/json';\n    msg.text = \"TSC aktiv\";\n    flow.set(\"maximum_power_enabled\", false);\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 340,
        "wires": [
            [
                "0e75480e512de449",
                "030d992b252761a2",
                "f087a77c8f9c0cb2"
            ]
        ]
    },
    {
        "id": "0e75480e512de449",
        "type": "debug",
        "z": "bb10d8ab69b25398",
        "name": "debug 27",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 760,
        "y": 340,
        "wires": []
    },
    {
        "id": "d7e301bab308abe1",
        "type": "inject",
        "z": "bb10d8ab69b25398",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 290,
        "y": 120,
        "wires": [
            [
                "f8ca654d922e67ec"
            ]
        ]
    },
    {
        "id": "030d992b252761a2",
        "type": "ui_text",
        "z": "bb10d8ab69b25398",
        "group": "756870f09af4bd03",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Status",
        "format": "{{msg.text}}",
        "layout": "row-spread",
        "className": "",
        "x": 650,
        "y": 400,
        "wires": []
    },
    {
        "id": "f8ca654d922e67ec",
        "type": "http request",
        "z": "bb10d8ab69b25398",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://raspberrypi:7190/api/Index/GetCarBaseSettingsOfEnabledCars",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 450,
        "y": 120,
        "wires": [
            [
                "781a9e8d717c0b84"
            ]
        ]
    },
    {
        "id": "781a9e8d717c0b84",
        "type": "change",
        "z": "bb10d8ab69b25398",
        "name": "store",
        "rules": [
            {
                "t": "set",
                "p": "tsc.car_settings",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 590,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "b223ce9d8a9017a5",
        "type": "inject",
        "z": "bb10d8ab69b25398",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 290,
        "y": 340,
        "wires": [
            [
                "eec996d2fe78177d"
            ]
        ]
    },
    {
        "id": "f087a77c8f9c0cb2",
        "type": "http request",
        "z": "bb10d8ab69b25398",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://raspberrypi:7190/api/Index/UpdateCarBaseSettings",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 670,
        "y": 280,
        "wires": [
            [
                "0a17aa339ffc6401"
            ]
        ]
    },
    {
        "id": "0a17aa339ffc6401",
        "type": "debug",
        "z": "bb10d8ab69b25398",
        "name": "debug 28",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 840,
        "y": 280,
        "wires": []
    },
    {
        "id": "75456581e89cc993",
        "type": "ui_numeric",
        "z": "bb10d8ab69b25398",
        "name": "",
        "label": "Auto voll aktiv ab Strompreis",
        "tooltip": "Liegt der Strompreis unter dieser Grenze wird das Auto mit voller Leistung geladen",
        "group": "756870f09af4bd03",
        "order": 4,
        "width": 0,
        "height": 0,
        "wrap": false,
        "passthru": true,
        "topic": "topic",
        "topicType": "msg",
        "format": "{{value}}",
        "min": "-10",
        "max": "30",
        "step": "0.1",
        "className": "",
        "x": 320,
        "y": 60,
        "wires": [
            [
                "b1eb87f8019b640f"
            ]
        ]
    },
    {
        "id": "db870fb7a0ca586c",
        "type": "mqtt in",
        "z": "bb10d8ab69b25398",
        "name": "",
        "topic": "teslamate/cars/1/usable_battery_level",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "aa30341bcc52e33c",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 1010,
        "y": 120,
        "wires": [
            [
                "2295338c87b2bfa9"
            ]
        ]
    },
    {
        "id": "2295338c87b2bfa9",
        "type": "ui_text",
        "z": "bb10d8ab69b25398",
        "group": "756870f09af4bd03",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Car SoC",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 1340,
        "y": 120,
        "wires": []
    },
    {
        "id": "d3d0cab4c7fb1d5c",
        "type": "change",
        "z": "cf76c2158bee1883",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "Hoymiles",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 420,
        "y": 140,
        "wires": [
            [
                "d44ebaf7da41fde2"
            ]
        ]
    },
    {
        "id": "18f58f68a1032259",
        "type": "ui_chart",
        "z": "cf76c2158bee1883",
        "name": "",
        "group": "d0745224b97dc204",
        "order": 1,
        "width": 0,
        "height": 0,
        "label": "Leistungen",
        "chartType": "line",
        "legend": "true",
        "xformat": "HH:mm",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "",
        "removeOlder": "6",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 970,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "9f693fce43608fc6",
        "type": "mqtt in",
        "z": "cf76c2158bee1883",
        "name": "",
        "topic": "sbfspot_2130252068",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "aa30341bcc52e33c",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 180,
        "y": 100,
        "wires": [
            [
                "2344af9f0c5cdeec"
            ]
        ]
    },
    {
        "id": "2344af9f0c5cdeec",
        "type": "change",
        "z": "cf76c2158bee1883",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.PACTot",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "Dach",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 430,
        "y": 100,
        "wires": [
            [
                "b3610e3f7617805a"
            ]
        ]
    },
    {
        "id": "eb15e9fb8ca4bc26",
        "type": "mqtt in",
        "z": "cf76c2158bee1883",
        "name": "",
        "topic": "solar/ac/power",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "aa30341bcc52e33c",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 200,
        "y": 140,
        "wires": [
            [
                "d3d0cab4c7fb1d5c"
            ]
        ]
    },
    {
        "id": "ad07a914b2996718",
        "type": "mqtt in",
        "z": "cf76c2158bee1883",
        "name": "",
        "topic": "solar/victron/HQ2235ANX7J/PPV",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "aa30341bcc52e33c",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 190,
        "y": 180,
        "wires": [
            [
                "749467dafbe90162"
            ]
        ]
    },
    {
        "id": "a2480bd687ca456a",
        "type": "mqtt in",
        "z": "cf76c2158bee1883",
        "name": "",
        "topic": "solar/battery/stateOfCharge",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "aa30341bcc52e33c",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 200,
        "y": 280,
        "wires": [
            [
                "bd2be7fc43e31408"
            ]
        ]
    },
    {
        "id": "03c50a1a105cae93",
        "type": "mqtt in",
        "z": "cf76c2158bee1883",
        "name": "",
        "topic": "solar/huawei/output_power",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "aa30341bcc52e33c",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 210,
        "y": 220,
        "wires": [
            [
                "c5ba248ed94edc48"
            ]
        ]
    },
    {
        "id": "749467dafbe90162",
        "type": "change",
        "z": "cf76c2158bee1883",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "Victron",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 420,
        "y": 180,
        "wires": [
            [
                "3406b1f2cd9cc636"
            ]
        ]
    },
    {
        "id": "c5ba248ed94edc48",
        "type": "change",
        "z": "cf76c2158bee1883",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "Huawei",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 420,
        "y": 220,
        "wires": [
            [
                "aba7f659244cdc49"
            ]
        ]
    },
    {
        "id": "bd2be7fc43e31408",
        "type": "change",
        "z": "cf76c2158bee1883",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "SoC",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 420,
        "y": 280,
        "wires": [
            [
                "07d9db1ed0bff173"
            ]
        ]
    },
    {
        "id": "82c56611a2d803b4",
        "type": "ui_chart",
        "z": "cf76c2158bee1883",
        "name": "",
        "group": "d0745224b97dc204",
        "order": 2,
        "width": 0,
        "height": 0,
        "label": "Ladezustand",
        "chartType": "line",
        "legend": "true",
        "xformat": "HH:mm",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "90",
        "removeOlder": "6",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 970,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "aba7f659244cdc49",
        "type": "delay",
        "z": "cf76c2158bee1883",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "minute",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 680,
        "y": 220,
        "wires": [
            [
                "18f58f68a1032259"
            ]
        ]
    },
    {
        "id": "07d9db1ed0bff173",
        "type": "delay",
        "z": "cf76c2158bee1883",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "minute",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 680,
        "y": 280,
        "wires": [
            [
                "82c56611a2d803b4"
            ]
        ]
    },
    {
        "id": "3406b1f2cd9cc636",
        "type": "delay",
        "z": "cf76c2158bee1883",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "minute",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 680,
        "y": 180,
        "wires": [
            [
                "18f58f68a1032259"
            ]
        ]
    },
    {
        "id": "d44ebaf7da41fde2",
        "type": "delay",
        "z": "cf76c2158bee1883",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "minute",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 680,
        "y": 140,
        "wires": [
            [
                "18f58f68a1032259"
            ]
        ]
    },
    {
        "id": "b3610e3f7617805a",
        "type": "delay",
        "z": "cf76c2158bee1883",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "minute",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 680,
        "y": 100,
        "wires": [
            [
                "18f58f68a1032259"
            ]
        ]
    }
]